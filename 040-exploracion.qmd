---
lang: es
format: 
  html:
    encoding: 'latin1'
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, fig.showtext = T)
```

# La exploración de los datos mediante gráficos.

En este capítulo esyudiaremos cómo describir conjuntos de datos de forma visual, utilizando varios tipos de gráficos distintos:

-   *Stemplot*
-   Histograma 
-   Diagrama de caja o *boxplot*
-   Gráfico de dispersión
-   Gráfico de series temporales

Veremos la relación visual entre un histograma y un diagrama de caja, y aprenderemos también a construir tablas de frecuencias en Excel y en R. Finalmente, veremos algunos otros tipos de gráficos que son útiles para aplicaciones concretas, como los gráficos de densidad.

Utilizaremos dos tablas de datos, 

- las alturas de un grupo de alumnos y alumnas, recogidos en un fichero CSV denominado `aula1.csv`, 
- los datos analíticos de una fabricación de camembert a lo largo de un año, recogidos en un fichero CSV denominado `camembert.csv`

## Explorando los datos con Excel y R.

Supongamos que queremos medir la altura de un grupo de alumnos de nuestra clase. Éste es nuestro grupo:

![](01-imagenes/grupo1.jpg)

Realizamos la medida de altura de cada persona y registramos los valores en una hoja de cálculo, siguiendo las buenas prácticas que hemos visto al estudiar los *datos ordenados*.

![](01-imagenes/aula1.png)

Guardamos esta tabla en el archivo CSV `aula1.csv`, y lo importamos a un dataframe de R para su uso a lo largo del capítulo.

::: { .callout-tip collapse="true" .content-visible when-format="html" icon="false" }
## Explicación del código R

1. **Cargar la librería `tidyverse`**:
   ```r
   library(tidyverse)
   ```
   - **`library(tidyverse)`**: Carga el paquete `tidyverse`, que es una colección de paquetes de R diseñados para el análisis de datos. Incluye paquetes como `ggplot2` para la visualización de datos, `dplyr` para la manipulación de datos, `tidyr` para la organización de datos, entre otros.

2. **Leer el archivo CSV**:
   ```r
   df_aula <- read.csv2("excel-R/aula1.csv", fileEncoding = 'latin1')
   ```
   - **`df_aula <- read.csv2("excel-R/aula1.csv", fileEncoding = 'latin1')`**: Lee el archivo CSV denominado `aula1.csv` que se encuentra en la carpeta `excel-R` y lo almacena en el dataframe `df_aula`. La función `read.csv2` se utiliza para leer archivos CSV donde el separador de campo es un punto y coma (`;`) y `fileEncoding = 'latin1'` asegura que los caracteres especiales se manejen correctamente durante la lectura del archivo.

3. **Mostrar el contenido del dataframe `df_aula`**:
   ```r
   head(df_aula)
   ```
   - **`head(df_aula)`**: Muestra las primeras líneas del contenido del dataframe `df_aula`, para que puedas visualizar los datos que has cargado.. Si simplemente escribimos el nombre del dataframe en la consola, sin usar la función `head()`, R imprimirá todo el dataframe. 

**Resumen**

Este código:

- Carga la colección de paquetes `tidyverse` para facilitar el análisis y manipulación de datos.
- Lee un archivo CSV y lo almacena en un *dataframe*.
- Muestra el contenido del dataframe para que puedas ver los datos que se han cargado.

:::
```{r message=FALSE, warning=FALSE}
library(tidyverse)
df_aula <- read.csv2("excel-R/aula1.csv",fileEncoding='latin1')
head(df_aula)
```

## El diagrama de tallo y hojas (*stem and leaf plot* o *stemplot*)

El  diagrama de tallo y hojas, también conocido como _stemplot_, es una herramienta gráfica utilizada en estadística para representar la distribución de un conjunto de datos. Es especialmente útil para conjuntos de datos pequeños y proporciona una forma rápida y efectiva de visualizar la forma de los datos y su dispersión. El _stemplot_ recibe este nombre porque el dibujo que resulta se asemeja a un tallo el que le salen las hojas que son los datos individuales. 

Los componentes de un _stemplot_ son:

- **Tallo**: Representa el grupo principal de los valores de los datos. Generalmente, se usa la parte más significativa del número. Por ejemplo, en el número 43, el tallo podría ser 4.

- **Hojas**: Representan los dígitos finales o menos significativos de los valores de los datos. Siguiendo el ejemplo anterior, la hoja sería 3.

### Construcción del diagrama

Vamos a utilizar los datos de medidas de altura de nuestro grupo de alumnos. Quitamos el último dígito a la derecha de nuestros valores y colocamos verticalmente los valores resultantes ordenándolos de menor a mayor, y evitando las repeticiones. Para evitar errores en la escala, debemos incluir los valores intermedios aunque no haya ninguno en nuestros datos (en el ejemplo, el valor 16 que correspondería a los 160). Esto forma el "tallo" de nuestro diagrama:

![](01-imagenes/aula1-stemplot-paso1.png)

A continuación añadimos las hojas en la celda a la derecha, que consisten en los valores que hemos "cortado" de nuestro árbol, uno al lado de otro, incluyendo esta vez los valores repetidos, en orden de menor a mayor. Por ejemplo, para el valor 135, descartamos 13 y utlizamos 5; para el valor 138, descartamos 13 y utilizamos 8, y así sucesivamente para todos los valores.

![](01-imagenes/aula1-stemplot-paso2.png)

R permite realizar el _stemplot_ mediante la función $stem()$ de forma automática:

::: { .callout-tip collapse="true" .content-visible when-format="html" icon="false" }
## Explicación del código R

1. **`df_aula$altura_cm`**:
   - **`df_aula`**: Este es el nombre del dataframe que contiene tus datos.
   - **`$altura_cm`**: Este símbolo `$` se utiliza para acceder a la columna `altura_cm` dentro del dataframe `df_aula`. Así que `df_aula$altura_cm` se refiere a los datos de la columna `altura_cm`.

2. **`stem(...)`**:
   - La función `stem()` en R genera un diagrama de tallo y hojas para los datos proporcionados. Este gráfico muestra la distribución de los datos de una manera similar a un histograma, pero utilizando valores numéricos en lugar de barras.

:::

```{r message=FALSE, warning=FALSE}
stem(df_aula$altura_cm)
```

### Interpretación del diagrama de tallo y hojas

- **Tallo**: Los números a la izquierda del símbolo `|` representan los valores base (o tallos), en este caso, las decenas de las alturas.
- **Hojas**: Los números a la derecha del símbolo `|` representan los dígitos adicionales (o hojas). Por ejemplo, en la línea `13 | 58`, el tallo es `13` (130), y las hojas son `5` y `8`, que corresponden a los datos `135` y `138`.

El diagrama nos dice que los valores en torno a 150 cm son los más frecuentes, y que hay un valor alto (175) que se separa un poco del resto.

### Resumen

El *stemplot* es muy sencillo de hacer y nos da una visión rápida y compacta de la *distribución* de nuestros valores, así como de la posible existencia de valores que se separan del conjunto. Estos valores alejados, que se conocen en inglés como *outliers*, tienen mucha importancia en el analisis e interpretación de los datos, como veremos más adelante.

La ventaja principal del *stemplot* es que mantiene los valores originales de las observaciones, y puede hacerse fácilmente con bolígrafo y papel, sin necesidad de más herramientas.

## Distribuciones de frecuencias

Una **distribución de frecuencias** es una tabla que muestra la frecuencia con la que ocurren los valores diferentes en un conjunto de datos. Esta herramienta es fundamental en la estadística descriptiva y permite resumir y visualizar cómo se distribuyen los datos de manera clara y comprensible. A partir de una tabla de frecuencias se pueden construir diagramas de barra o histogramas para visualizar la tabla de forma gráfica.

Para construir una distribución de frecuencias, agrupamos nuestros valores por intervalos, y contamos el número de observaciones que aparecen en cada intervalo. Los componentes de una distribución de frecuencias son:

- las **categorías o clases** son los intervalos o valores específicos de los datos que se están analizando. Cada categoría representa un rango de valores en caso de datos continuos, o valores específicos en caso de datos discretos.
- la **frecuencia absoluta** es un *recuento simple* de cuántas veces aparece cada valor en un conjunto de datos.
- la **frecuencia relativa** nos muestra la *proporción* de cada valor frente al total. Puede expresarse como fracción (entre 0 y 1) o como porcentaje (respecto a 100), y se calcula como:
   $$
   \text{Frecuencia Relativa} = \frac{\text{Frecuencia Absoluta}}{\text{Número Total de Observaciones}}
   $$
- la **frecuencia acumulada** nos dice cuántas observaciones están por debajo de un cierto valor.
- la **frecuencia relativa acumulada** es la proporción de valores que están por debajo de un cierto valor

### Construcción en Excel y en R

La tabla a continuación muestra una distribución de frecuencias de las alturas de nuestro grupo de alumnos, calculada mediante una tabla dinámica de Excel.

::: { .callout-tip collapse="true" .content-visible when-format="html" icon="false" }
## Instrucciones paso a paso en Excel

Para crear una tabla de frecuencias de la variable `altura_cm` mediante tablas dinámicas en Excel, sigue estos pasos:

**1. Selecciona los Datos**

1. Abre tu archivo de Excel y selecciona toda la tabla que incluye los encabezados (`nombre` y `altura_cm`).

**2. Inserta una tabla dinámica**

1. Ve a la pestaña **Insertar** en la barra de herramientas de Excel.
2. Haz clic en **Tabla Dinámica**.
3. En el cuadro de diálogo que aparece, asegúrate de que el rango de datos seleccionado es correcto y elige dónde deseas colocar la tabla dinámica (en una nueva hoja de cálculo o en la hoja actual).

**3. Añade la frecuencia absoluta**

1. En el panel de campos de la tabla dinámica, arrastra el campo `altura_cm` a la sección **Filas**.
2. Arrastra nuevamente el campo `altura_cm` a la sección **Valores**.

**4. Ajusta la configuración de valores**

1. Haz clic en el campo `altura_cm` en la sección **Valores**.
2. Selecciona **Configuración de campo de valor**.
3. En el cuadro de diálogo que aparece, asegúrate de que esté seleccionada la opción **Recuento**
4. Acepta todo hasta volver a Excel.

**5. Añade la frecuencia relativa**

1. En el panel de campos de la tabla dinámica, arrastra de nuevo el campo `altura_cm` a la sección **Valores**. Ahora la variable aparecerá como `altura_cm2`.

**6. Ajusta de nuevo la configuración de valores**

1. Haz clic en el campo `altura_cm2` en la sección **Valores**.
2. Selecciona **Configuración de campo de valor**.
3. En el cuadro de diálogo que aparece, asegúrate de que esté seleccionada la opción **Recuento**.
4.  En ese mismo cuadro, haz click en el botón **Formato de número**, selecciona **Número** y **2 decimales**, y acepta.
5. En ese mismo cuadro, selecciona la pestaña que dice **Mostrar valores como**
6. En el menú desplegable, escoge la opción **% del total de columnas**.
7. Acepta todo hasta volver a Excel.

**7. Ordena y formatea**

1. Puedes ordenar las alturas en orden ascendente o descendente haciendo clic en la flecha junto a `altura_cm` en la tabla dinámica.
2. También puedes cambiar el formato de la tabla dinámica para que sea más fácil de leer.
3. Puedes renombrar los encabezados de la tabla para que sea más fácil de leer, rotulando las columnas, por ejemplo, como `frec_abs`y `frec_rel`, o cualquier otro encabezado que te resulte claro y útil.

:::


![](01-imagenes/aula1-td-frec.png)

También podemos calcular las frecuencias absolutas y relativas de nuestra tabla en R. La formulación en R requiere una buena comprensión de las funciones de la libreria *tidyverse* utilizadas en la preparación de la tabla.

::: { .callout-tip collapse="true" .content-visible when-format="html" icon="false" }
## Explicación del código R

1. **Cargar la librería `tidyverse`**:
   ```r
   library(tidyverse)
   ```
   - **`library(tidyverse)`**: Carga el paquete `tidyverse`, que es una colección de paquetes de R diseñados para el análisis de datos, como `ggplot2`, `dplyr`, `tidyr`, entre otros.

2. **Leer el archivo CSV**:
   ```r
   df_aula1 <- read.csv2("excel-R/aula1.csv", fileEncoding = 'latin1')
   ```
   - **`df_aula1 <- read.csv2("excel-R/aula1.csv", fileEncoding = 'latin1')`**: Lee el archivo CSV denominado `aula1.csv` y lo almacena en el dataframe `df_aula1`. La opción `fileEncoding = 'latin1'` asegura que los caracteres especiales se manejen correctamente durante la lectura del archivo.

3. **Crear y agrupar por intervalos**:
   ```r
   df_aula1 |>
     mutate(intervalo = cut(altura_cm, breaks = seq(130, 175, by = 5), include.lowest = TRUE)) |>
     group_by(intervalo)
   ```
   - **`df_aula1 |>`**: Utiliza el operador pipe (`|>`) para encadenar una serie de operaciones en el dataframe `df_aula1`.
   - **`mutate(intervalo = cut(altura_cm, breaks = seq(130, 175, by = 5), include.lowest = TRUE))`**: Crea una nueva columna `intervalo` que contiene intervalos de la columna `altura_cm` con un rango desde 130 hasta 175 cm, con una amplitud de clase de 5 cm. La opción `include.lowest = TRUE` asegura que el valor más bajo esté incluido en el primer intervalo.
   - **`group_by(intervalo)`**: Agrupa los datos por los intervalos definidos en la columna `intervalo`.

4. **Calcular la frecuencia absoluta**:
   ```r
   summarise(frec_abs = n())
   ```
   - **`summarise(frec_abs = n())`**: Crea un nuevo dataframe resumido que contiene la frecuencia absoluta (`frec_abs`) de cada intervalo. La función `n()` cuenta el número de observaciones en cada intervalo.

5. **Calcular la frecuencia relativa**:
   ```r
   mutate(frec_rel = frec_abs / sum(frec_abs))
   ```
   - **`mutate(frec_rel = frec_abs / sum(frec_abs))`**: Añade una nueva columna `frec_rel` al dataframe que contiene la frecuencia relativa. Esto se calcula dividiendo la frecuencia absoluta de cada intervalo por la suma total de todas las frecuencias absolutas.

El resultado es un dataframe que muestra los intervalos de `altura_cm` (columna `intervalo`), junto con las frecuencias absolutas (`frec_abs`) y las frecuencias relativas (`frec_rel`) para cada intervalo. Este proceso facilita el análisis de la distribución de los datos en intervalos específicos.

:::

```{r message=FALSE, warning=FALSE}
library (tidyverse)
df_aula1 <- read.csv2("excel-R/aula1.csv",fileEncoding='latin1')

df_aula1 |>
  mutate (intervalo = cut(altura_cm, breaks = seq(130, 175, by =5), include_lowest = TRUE)) |>
  group_by(intervalo) |>
  summarise (frec_abs = n()) |>
  mutate(frec_rel = frec_abs / sum(frec_abs))
```

::: {.callout-important .content-visible when-format="html"}
## Importante: uso de los símbolos para designar los intervalos
R utiliza los símbolos `(` y `[` para definir los intervalos, tal como se hace en matemáticas.

-   Intervalo **abierto**: El símbolo `(` se utiliza para denotar un intervalo abierto. El límite correspondiente **no** está incluuido en el intervalo. 
-   Intervalo **cerrado o semiabierto**:El símbolo `[` se utiliza para denotar un intervalo cerrado o semiabierto. EL límite correspondiente **sí** está incluido en el intervalo.

Ejemplos:

- $(a, b)$ representa todos los números reales **mayores** que $a$ y **menores** que $b$ (excluye los valores $a$ y $b$).
- $[a, b]$ representa todos los números reales **mayores o iguales** que $a$ y **menores o iguales** que $b$ (incluye $a$ y $b$).
- $[a, b)$ representa todos los números reales **mayores o iguales** que $a$ y **menores** que $b$ (incluye $a$, pero excluye $b$)
- $(a, b]$ representa todos los números reales **mayores** que $a$ y **menores o iguales** que $b$ (excluye $a$, pero incluye $b$).
:::

Si comparamos los dos métodos que hemos utilizado para construir la tabla de frecuencias, vemos que:

- en Excel los pasos que hemos dado no están registrados y a la vista, y, por lo tanto, no son fácilmente revisables
- en R, todos los pasos y opciones que hemos utilizado están a la vista en el código del script

Si otra persona quisiera modificar la tabla, le sería fácil editar el código R y relanzar el script, mientras que en Excel no sería fácil asegurarse de todos y cada uno de los pasos y clicks de ratón que hemos dado para construir y formatear la tabla. 

Es el caso, por ejemplo, de que enviásemos la tabla a otra persona y ésta tuviese que editarla en nuestra ausencia. En Excel, tendríamos que enviar a esa persona una explicación con las instrucciones oportunas; en cambio, en R, una vez que se comprende el código, no hacen falta más explicaciones adicionales. Incluso sin una comprensión total del código, se podría duplicar exactamente la tabla copiando y ejecutando el código.


Esta es una de las principales razones de la conveniencia del aprendizaje de R incluso para las actividades más sencillas.


::: {.callout-note .content-visible when-format="html" icon="false"}
## Ejercicio propuesto
En la tabla de frecuencias anterior, calcular **frecuencia absoluta acumulada** y **frecuencia relativa acumulada** en Excel y en R, e incluirlas en la tabla como dos columnas adicionales.

:::


::: { .callout-tip collapse="true" .content-visible when-format="html" icon="false" }
## Respuesta al ejercicio propuesto (en R)

Para añadir las columnas de frecuencias absolutas acumuladas (`frec_abs_acum`) y frecuencias relativas acumuladas (`frec_rel_acum`) a tu dataframe `df_aula1`, puedes usar las funciones `cumsum()` y algunas mutaciones adicionales. Aquí tienes el código actualizado:

**Código R actualizado**

```r
## Cargar las librerías necesarias
library(tidyverse)

## Crear el dataframe con las nuevas columnas de frecuencias acumuladas
df_aula1 |>
  mutate(intervalo = cut(altura_cm, breaks = seq(130, 175, by = 5), include_lowest = TRUE)) |>
  group_by(intervalo) |>
  summarise(frec_abs = n()) |>
  mutate(frec_rel = frec_abs / sum(frec_abs),
         frec_abs_acum = cumsum(frec_abs),
         frec_rel_acum = cumsum(frec_rel)) |>

```
**Detalle del código**

1. **Crear intervalos**:
   ```r
   mutate(intervalo = cut(altura_cm, breaks = seq(130, 175, by = 5), include_lowest = TRUE))
   ```
   - Agrupa los valores de `altura_cm` en intervalos definidos por `seq(130, 175, by = 5)`.

2. **Agrupar por intervalo y calcular frecuencia absoluta**:
   ```r
   group_by(intervalo) |>
   summarise(frec_abs = n())
   ```
   - Agrupa por `intervalo` y calcula la frecuencia absoluta (`frec_abs`) de cada intervalo.

3. **Calcular frecuencia relativa**:
   ```r
   mutate(frec_rel = frec_abs / sum(frec_abs))
   ```
   - Calcula la frecuencia relativa (`frec_rel`) dividiendo la frecuencia absoluta de cada intervalo por la suma total de frecuencias absolutas.

4. **Calcular frecuencia absoluta acumulada**:
   ```r
   mutate(frec_abs_acum = cumsum(frec_abs))
   ```
   - Usa `cumsum()` para calcular la frecuencia absoluta acumulada (`frec_abs_acum`).

5. **Calcular frecuencia relativa acumulada**:
   ```r
   mutate(frec_rel_acum = cumsum(frec_rel))
   ```
   - Usa `cumsum()` para calcular la frecuencia relativa acumulada (`frec_rel_acum`).

**Resultado:**

El dataframe resultante tendrá las siguientes columnas:

- `intervalo`: Intervalos definidos de `altura_cm`.
- `frec_abs`: Frecuencia absoluta de cada intervalo.
- `frec_rel`: Frecuencia relativa de cada intervalo.
- `frec_abs_acum`: Frecuencia absoluta acumulada.
- `frec_rel_acum`: Frecuencia relativa acumulada.

:::

## Diagramas de barra e histogramas

Las distribuciones de frecuencias se pueden visualizar mediante varios tipos de gráficos, como histogramas, gráficos de barras y polígonos de frecuencias.

Cuando nuestra variable es *discreta*, podemos representar las frecuencias de cada valor de forma gráfica utilizando un diagrama de barras. Este diagrama utiliza barras rectangulares para representar la frecuencia de cada categoría.

El diagrama de barras no es muy utilizado en el análisis de datos, dado que habitualmente la mayoría de las variables que analizamos son numéricas continuas. Es mucho más utilizado el **histograma**, que es un diagrama que utiliza las barras rectangulares para hacer un gráfico de la distribución de valores continuos, previamente agrupados en clases, tal como se ha hecho en la tabla de frecuencias.

## Histogramas en Excel

La tabla dinámica que hemos construido en Excel ha convertido nuestra variable continua, `altura_cm`, en una tabla de valores discretos, al agrupar los valores en intervalos. En Excel podemos representar las frecuencias absolutas de nuestra tabla gráficamente, insertando un gráfico dinámico a partir de la tabla:

![](01-imagenes/aula1-diag-barras.png)


En el caso de la tabla dinámica, Excel no construye el diagrama de barras a partir de la tabla de los valores originales, sino de las categorías de la tabla dinámica. Dado que estas categorías (los intervalos que ha formado la tabla dinámica) son discretas, Excel utiliza el resultado de la tabla dinámica para hacer el gráfico con un diagrama de barras.

El histograma muestra su utilidad cuando representamos la distribución de un conjunto de valores más grande que nuestros once alumnos. Veamos su aplicación a los datos diarios de una fabricación de queso camembert a lo largo de un año.Los datos de esta fabricación están en el fichero `camembert.csv`.

La tabla de datos tiene esta estructura:

![](01-imagenes/camembert-tabla-datos.png)

La tabla está formada por 211 casos. 

Visualicemos la tabla con R:

::: { .callout-tip collapse="true" .content-visible when-format="html" icon="false" }
## Explicación del código R

1. **Cargar las librerías necesarias**:
   ```r
   library(DT)
   ```
   - **`library(DT)`**: Carga el paquete `DT` para crear tablas interactivas.

2. **Leer el archivo CSV**:
   ```r
   df_camembert <- read.csv2("excel-R/camembert.csv", fileEncoding = 'latin1')

   ```

3. **Mostrar la tabla interactiva**:
   ```r
   datatable(df_camembert, options = list(pageLength = 5), caption = 'Tabla de Datos de Camembert')
   ```
   - **`datatable(df_camembert, options = list(pageLength = 5), caption = 'Tabla de Datos de Camembert')`**: Crea una tabla interactiva con `df_camembert`, mostrando cinco registros por página (`pageLength = 5`). La tabla tiene una opción para desplazarse por el resto de los datos, buscar, y ordenar.

**Resultado**

Este código en R Markdown generará una tabla interactiva donde podrás visualizar cinco registros a la vez y desplazarte por el resto de los datos de manera intuitiva. La función `datatable()` es excelente para manejar grandes conjuntos de datos y ofrecer una experiencia de usuario dinámica.

:::

```{r message=FALSE, warning=FALSE}
library (DT)

df_camembert <- read.csv2("excel-R/camembert.csv",fileEncoding='latin1')

# Mostrar la tabla interactiva con datatable 
datatable(df_camembert, options = list(pageLength = 5), caption = 'Tabla de Datos de Camembert')

```


Analicemos los datos con Excel. Los pasos a seguir son:

1.  Construir la tabla dinámica
2.  Agrupar los datos
3.  Insertar el gráfico a partir de la tabla

Con una agrupación de datos en intervalos de 1, esta es nuestra tabla dinámica:

![](01-imagenes/camembert-td.png)

En la figura siguiente vemos el histograma correspondiente a la tabla anterior, con un intervalo de clase de 1 punto de extracto seco total, y otras dos alternativas si el intervalo de clase fuese de 2 puntos o de de 0,5 puntos.


::: {layout="[[1], [1,1]]"}
![](01-imagenes/camembert-histo1.png)

![](01-imagenes/camembert-histo2.png)

![](01-imagenes/camembert-histo3.png)
:::

La decisión de cambiar la amplitud del intervalo en un histograma influye en el aspecto del gráfico y es una opción personal; lo mejor es utilizar la que en nuestra opinión refleje mejor el aspecto de la distribución de datos, ni demasiado grande ni demasiado pequeña. En todo caso, debemos ser capaces de interpretar que la distribución de los valores es la misma en los tres casos: hay una mayoría de casos con valores entre 46 y 48, y muy pocos casos con valores muy bajos o muy altos. En este caso, la distribución de los valores es aproximadamente simétrica, y se reparten alrededor de una mayoría de valores centrales.

Aunque Excel utiliza el diagrama de barras para construir el gráfico, en realidad estamos construyendo un histograma, en dos etapas: agrupación de los datos en una tabla de frecuencia (tabla dinámica) y creación del gráfico a partir de esta tabla. Al construir un histograma en R, el programa realiza automáticamente ambos pasos. Para verlo por partes, vamos a construir la tabla de frecuencias y el histograma de la variable `est`en R.

::: { .callout-tip collapse="true" .content-visible when-format="html" icon="false" }
## Explicación del código R

1. **Cargar la librería `tidyverse`**:
   ```r
   library(tidyverse)
   ```
   - **`library(tidyverse)`**: Carga el paquete `tidyverse`, que es una colección de paquetes de R diseñados para el análisis de datos, como `ggplot2`, `dplyr`, `tidyr`, entre otros.

2. **Leer el archivo CSV**:
   ```r
   df_camembert <- read.csv2("excel-R/camembert.csv", fileEncoding = 'latin1')
   ```
   - **`df_camembert <- read.csv2("excel-R/camembert.csv", fileEncoding = 'latin1')`**: Lee el archivo CSV denominado `camembert.csv` y lo almacena en el dataframe `df_camembert`. La opción `fileEncoding = 'latin1'` asegura que los caracteres especiales se manejen correctamente durante la lectura del archivo.

3. **Crear y agrupar por intervalos**:
   ```r
   df_camembert |>
     mutate(intervalo = cut(est, breaks = seq(40, 54, by = 1), include.lowest = TRUE)) |>
     group_by(intervalo)
   ```
   - **`df_camembert |>`**: Utiliza el operador pipe (`|>`) para encadenar una serie de operaciones en el dataframe `df_camembert`.
   - **`mutate(intervalo = cut(est, breaks = seq(40, 54, by = 1), include.lowest = TRUE))`**: Crea una nueva columna `intervalo` que contiene intervalos de la columna `est` con un rango desde 40 hasta 54, con una amplitud de clase de 1. La opción `include.lowest = TRUE` asegura que el valor más bajo esté incluido en el primer intervalo.
   - **`group_by(intervalo)`**: Agrupa los datos por los intervalos definidos en la columna `intervalo`.

4. **Calcular la frecuencia absoluta**:
   ```r
   summarise(frec_abs = n())
   ```
   - **`summarise(frec_abs = n())`**: Crea un nuevo dataframe resumido que contiene la frecuencia absoluta (`frec_abs`) de cada intervalo. La función `n()` cuenta el número de observaciones en cada intervalo.

5. **Calcular la frecuencia relativa**:
   ```r
   mutate(frec_rel = frec_abs / sum(frec_abs))
   ```
   - **`mutate(frec_rel = frec_abs / sum(frec_abs))`**: Añade una nueva columna `frec_rel` al dataframe que contiene la frecuencia relativa. Esto se calcula dividiendo la frecuencia absoluta de cada intervalo por la suma total de todas las frecuencias absolutas.

El resultado es un dataframe que muestra los intervalos de `est` (columna `intervalo`), junto con las frecuencias absolutas (`frec_abs`) y las frecuencias relativas (`frec_rel`) para cada intervalo. Este proceso facilita el análisis de la distribución de los datos en intervalos específicos.

:::

```{r message=FALSE, warning=FALSE}
library (tidyverse)
df_camembert <- read.csv2("excel-R/camembert.csv",fileEncoding='latin1')

# Crear tabla de frecuencias
df_camembert |>
  mutate (intervalo = cut(est, breaks = seq(40, 54, by =1), include_lowest = TRUE)) |>
  group_by(intervalo) |>
  summarise (frec_abs = n()) |>
  mutate(frec_rel = frec_abs / sum(frec_abs))
```

Este script nos permite visualizar la tabla de frecuencias.Ahora completamos el script con el código necesario para redirigir la tabla de frecuencias a `ggplot()` y hacer el diagrama de barras.

::: { .callout-tip collapse="true" .content-visible when-format="html" icon="false" }
## Explicación del código R adicional

1. **Iniciar `ggplot` con las estéticas (aes)**:
   ```r
   ggplot(aes(x = intervalo, y = frec_abs)) +
   ```
   - **`ggplot(aes(x = intervalo, y = frec_abs))`**: Inicia el objeto `ggplot` y define las estéticas (aes), que son las variables mapeadas a los ejes del gráfico.
     - **`x = intervalo`**: Mapea la variable `intervalo` al eje X.
     - **`y = frec_abs`**: Mapea la variable `frec_abs` al eje Y.

2. **Agregar las barras del gráfico**:
   ```r
   geom_bar(stat = "identity", fill = "darkblue", alpha = 0.7, color = "black") +
   ```
   - **`geom_bar(stat = "identity", fill = "darkblue", alpha = 0.7, color = "black")`**: Añade una capa de barras al gráfico.
     - **`stat = "identity"`**: Especifica que las alturas de las barras deben ser iguales a los valores de `frec_abs` (en lugar de contarse las observaciones en cada intervalo).
     - **`fill = "darkblue"`**: Rellena las barras con el color azul oscuro.
     - **`alpha = 0.7`**: Establece la transparencia de las barras (valor entre 0 y 1, donde 0 es completamente transparente y 1 es opaco).
     - **`color = "black"`**: Colorea los bordes de las barras en negro.

3. **Agregar etiquetas y título**:
   ```r
   labs(title = "Diagrama de barras de frecuencia absoluta",
        x = "Intervalos de 'est'",
        y = "Frecuencia Absoluta") +
   ```
   - **`labs(title = "Diagrama de barras de frecuencia absoluta", x = "Intervalos de 'est'", y = "Frecuencia Absoluta")`**: Añade etiquetas y título al gráfico.
     - **`title = "Diagrama de barras de frecuencia absoluta"`**: Establece el título del gráfico.
     - **`x = "Intervalos de 'est'"`**: Etiqueta el eje X.
     - **`y = "Frecuencia absoluta"`**: Etiqueta el eje Y.

4. **Aplicar un tema minimalista**:
   ```r
   theme_minimal()
   ```
   - **`theme_minimal()`**: Aplica un tema minimalista al gráfico, que proporciona un diseño limpio y simple, sin distracciones innecesarias.

Este es el código completo de nuevo para referencia:

```r
ggplot(aes(x = intervalo, y = frec_abs)) +
  geom_bar(stat = "identity", fill = "darkblue", alpha = 0.7, color = "black") +
  labs(title = "Diagrama de barras de frecuencia absoluta",
       x = "Intervalos de 'est'",
       y = "Frecuencia absoluta") +
  theme_minimal()
```

Este código te permitirá generar un diagrama de barras que muestra la frecuencia absoluta de cada intervalo en el eje X (intervalos) y la frecuencia en el eje Y (frecuencia absoluta), con las barras coloreadas en azul oscuro y bordes negros.

:::

```{r}
# Crear tabla de frecuencias
df_camembert |>
  mutate(intervalo = cut(est, breaks = seq(40, 54, by = 1), include.lowest = TRUE)) |>
  group_by(intervalo) |>
  summarise(frec_abs = n()) |>
  mutate(frec_rel = frec_abs / sum(frec_abs)) |>
  
# Este es el código adicional para hacer el gráfico  
  ggplot(aes(x = intervalo, y = frec_abs)) +
   geom_bar(stat = "identity", fill = "darkblue", alpha = 0.7, color = "black") +
   labs(title = "Diagrama de Barras de Frecuencia absoluta",
       x = "Intervalos de 'est'",
       y = "Frecuencia Absoluta") +
   theme_minimal()
```

Modificando el criterio de la amplitud de clase para agrupar de dos en dos en vez de uno, podemos cambiar la tabla, igual que hemos hecho en Excel.

```{r message=FALSE, warning=FALSE}
library (tidyverse)
df_camembert <- read.csv2("excel-R/camembert.csv",fileEncoding='latin1')
df_camembert |>
  mutate (intervalo = cut(est, breaks = seq(40, 54, by =2), include_lowest = TRUE)) |>
  group_by(intervalo) |>
  summarise (frec_abs = n()) |>
  mutate(frec_rel = frec_abs / sum(frec_abs)) |>
  ggplot(aes(x = intervalo, y = frec_abs)) +
   geom_bar(stat = "identity", fill = "darkblue", alpha = 0.7, color = "black") +
   labs(title = "Diagrama de Barras de Frecuencia absoluta",
       x = "Intervalos de 'est'",
       y = "Frecuencia absoluta (núm. de casos)") +
   theme_minimal()
```

R tiene una función básica, la función `hist()`, que construye el histograma directamente sin necesidad de hacer previamente una tabla de frecuencias (en realidad, la tabla de frecuencias se calcula internamente). Como siempre, presentamos esta opción básica junto con la opción de la función `ggplot()` de `tidyverse`, y utilizamos las opciones de personalización de `ggplot()`para trazar un histograma de aspecto semejante al gráfico básico; en esta ocasión, utilizamos el color de relleno gris.

::: { .callout-tip collapse="true" .content-visible when-format="html" icon="false" }
## Explicación del código R

**Primer Fragmento de Código:** `hist(df_camembert$est)`

1. **Crear un Histograma Base**:
   ```r
   hist(df_camembert$est)
   ```
   - **`hist(df_camembert$est)`**: Esta línea de código crea un histograma básico de la variable `est` del dataframe `df_camembert` utilizando la función `hist()` de base R.
     - **`df_camembert$est`**: Especifica la columna `est` del dataframe `df_camembert` para la cual se generará el histograma.
   - La función `hist()` por defecto elige la cantidad y el ancho de las barras basándose en los datos proporcionados.

**Segundo Fragmento de Código: `ggplot` y `geom_histogram()`**

2. **Utilizar `ggplot2` para Crear un Histograma Personalizado**:
   ```r
   df_camembert |>
     ggplot(aes(x = est)) +
     geom_histogram(binwidth = 1, fill = "grey", alpha = 0.7, color = "black") +
     theme_minimal()
   ```
   - **`df_camembert |>`**: Utiliza el operador pipe (`|>`) para encadenar operaciones sobre el dataframe `df_camembert`.

3. **Iniciar `ggplot` con las Estéticas (aes)**:
   ```r
   ggplot(aes(x = est)) +
   ```
   - **`ggplot(aes(x = est))`**: Inicia un objeto `ggplot` y define las estéticas (aes), mapeando la variable `est` al eje X.

4. **Agregar las Barras del Histograma**:
   ```r
   geom_histogram(binwidth = 1, fill = "grey", alpha = 0.7, color = "black") +
   ```
   - **`geom_histogram(binwidth = 1, fill = "grey", alpha = 0.7, color = "black")`**: Añade una capa de barras al histograma.
     - **`binwidth = 1`**: Define la amplitud de clase en 1 unidad.
     - **`fill = "grey"`**: Colorea las barras del histograma de gris.
     - **`alpha = 0.7`**: Establece la transparencia de las barras (valor entre 0 y 1, donde 0 es completamente transparente y 1 es opaco).
     - **`color = "black"`**: Colorea los bordes de las barras en negro.

5. **Aplicar un Tema Minimalista**:
   ```r
   theme_minimal()
   ```
   - **`theme_minimal()`**: Aplica un tema minimalista al gráfico, proporcionando un diseño limpio y simple, sin distracciones innecesarias.

**Resumen completo del código**

- **Primer Fragmento**: 
  ```r
  hist(df_camembert$est)
  ```
  crea un histograma básico de la variable `est` usando la función base `hist()` de R.
- **Segundo Fragmento**: 
  ```r
  df_camembert |>
    ggplot(aes(x = est)) +
    geom_histogram(binwidth = 1, fill = "darkblue", alpha = 0.7, color = "black") +
    theme_minimal()
  ```
  Este conjunto de instrucciones crea un histograma más personalizable y estilizado usando `ggplot2`, con opciones para el ancho de las barras, color de relleno, transparencia y estilo del tema.

:::

```{r message=FALSE, warning=FALSE}
#| label: fig-histo1
#| fig-cap: "Ejemplos de histogramas"
#| fig-subcap: 
#|   - "Función básica de R"
#|   - "Función ggplot()"
#| layout-ncol: 2

hist(df_camembert$est)

df_camembert |>
  ggplot(aes(x=est)) +
    geom_histogram(binwidth=1, fill = "grey", alpha = 0.7, color = "black") +
    theme_minimal()
```


Vemos que los dos gráficos no son idénticos a pesar de provenir de los mismos datos, porque la construcción de los intervalos subyacente es ligeramente diferente. Esto no debe preocuparnos, porque el aspecto general de la distribución de los datos es el mismo.

En la fase de exploración nos importa más entender estas propiedades de los datos (aspecto, forma de la distribución) que la precisión en la construcción del gráfico. En todo caso, en `qqplot()`podemos usar infinidad de opciones que nos permiten configurar el gráfico hasta los más mínimos detalles, por lo que esta función es mucho más útil que las funciones básicas para preparar gráficos que vayan destinados a informes o presentaciones. La función básica `hist()`, por su parte, es más sencilla de usar al principio cuando no tenemos todavía experiencia con `ggplot()`, y también para una visualización rápida.

En ocasiones, nos encontramos con datos que son asimétricos: hay una mayoría de valores bajos o bien de valores altos. Veamos un caso: los recuentos bacterianos de bacterias coliformes, que tenemos en la última columna a la derecha de nuestra tabla, en la variable ´coliformes´.

![](01-imagenes/camembert-graf-colis.png)

En este caso, vemos que la mayoría de los casos tienen valor cero. Es el caso de los recuentos de bacterias contaminantes, en el que la mayoría de los análisis tienen recuentos cero o muy bajos, y sólo en pocos casos tienen valores altos. Veremos con más detalle cómo tratar estas distribuciones cuando hablemos de las distribuciones de probabilidad, en capítulos posteriores.

En los histogramas de los recuentos bacterianos,utilizamos una opción para aumentar el número de barras que queremos en el histograma: `breaks=` en la función base, `bins=` en `ggplot()`:

```{r}
#| label: fig-histo2
#| fig-cap: "Ejemplos de histogramas"
#| fig-subcap: 
#|   - "Función básica de R"
#|   - "Función ggplot()"
#| layout-ncol: 2

hist(df_camembert$coliformes, breaks=50)

df_camembert |>
  ggplot(aes(x=coliformes)) +
    geom_histogram(bins=50)
```

En casos de distribuciones muy asimétricas, a veces es conveniente aplicar una transformación a los datos, tal como el logaritmo decimal, mediante la función `log10()`; esto facilita la interpretación del gráfico:

```{r}
df_camembert |>
  ggplot(aes(x=log10(coliformes+1))) +
    geom_histogram(bins=50)
```

## Gráficos de densidad

Un gráfico de densidad en R es una representación visual suavizada de la distribución de un conjunto de datos. A diferencia de los histogramas, que dividen los datos en intervalos y cuentan las frecuencias, los gráficos de densidad utilizan técnicas estadísticas no paramétricas para estimar la función de densidad de probabilidad.

Un gráfico de densidad, también conocido como *density plot*, es una representación visual suavizada de la distribución de un conjunto de datos.A diferencia de los histogramas, que dividen los datos en intervalos y cuentan las frecuencias, los gráficos de densidad utilizan técnicas estadísticas no paramétricas para estimar la función de densidad de probabilidad de una variable continua. El gráfico de densidad utiliza suavizamiento para proporcionar una estimación más continua de la distribución de los datos.

Excel no permite la representación de los gráficos de densidad; en R pueden hacerse con la función `ggplot()`simplemente añadiendo la geometría `geom_density()`

```{r}
#| label: fig-charts
#| fig-cap: "Ejemplos de diagramas de densidad"
#| fig-subcap: 
#|   - "EST"
#|   - "coliformes"
#| layout-ncol: 2

df_camembert |>
  ggplot(aes(x=est)) +
    geom_density()

df_camembert |>
  ggplot(aes(x=log(coliformes+1))) +
    geom_density()
```

Podemos representar simultáneamente el histograma y la función de densidad; hay que tener en cuenta que para representar la densidad y el histograma superpuestos, nos vemos obligados a cambiar la escala del eje Y a los valores de densidad en vez de a las frecuencias, de manera que los dos gráficos puedan solaparse sin problemas.

::: { .callout-tip collapse="true" .content-visible when-format="html" icon="false" }
## Explicación del código R

1. **Iniciar el pipeline con `df_camembert`**:
   ```r
   df_camembert |>
   ```
   - Utiliza el operador pipe (`|>`) para encadenar operaciones sobre el dataframe `df_camembert`.

2. **Iniciar `ggplot` con las estéticas (aes)**:
   ```r
   ggplot(aes(x = est)) +
   ```
   - **`ggplot(aes(x = est))`**: Inicia un objeto `ggplot` y define las estéticas (aes). La variable `est` se mapea al eje X.

3. **Agregar la capa del histograma**:
   ```r
   geom_histogram(aes(y = ..density..), bins = 20, fill = "lightblue", color = "black") +
   ```
   - **`geom_histogram(aes(y = ..density..), bins = 20, fill = "lightblue", color = "black")`**:
     - **`aes(y = ..density..)`**: Ajusta el eje Y para que muestre la densidad en lugar de la frecuencia absoluta.
     - **`bins = 20`**: Especifica el número de barras (bins) en el histograma.
     - **`fill = "lightblue"`**: Colorea las barras del histograma de azul claro.
     - **`color = "black"`**: Colorea los bordes de las barras en negro.

4. **Agregar la capa de densidad**:
   ```r
   geom_density(color = "red", size = 1) +
   ```
   - **`geom_density(color = "red", size = 1)`**: Añade una capa de densidad al gráfico.
     - **`color = "red"`**: Colorea la línea de densidad en rojo.
     - **`size = 1`**: Establece el grosor de la línea de densidad.

5. **Agregar etiquetas y título**:
   ```r
   labs(title = "Histograma y densidad", x = "Valores", y = "Densidad")
   ```
   - **`labs(title = "Histograma y densidad", x = "Valores", y = "Densidad")`**: Añade etiquetas y título al gráfico.
     - **`title = "Histograma y densidad"`**: Establece el título del gráfico.
     - **`x = "Valores"`**: Etiqueta el eje X como "Valores".
     - **`y = "Densidad"`**: Etiqueta el eje Y como "Densidad".

**Resumen Completo**

El código realiza las siguientes acciones:

- Inicia el pipeline con el dataframe `df_camembert`.
- Define la estética (aes) para mapear la variable `est` al eje X.
- Añade un histograma con barras azules claras, bordes negros, 20 bins y ajusta el eje Y para mostrar la densidad.
- Añade una capa de densidad con una línea roja y grosor de 1.
- Añade un título y etiquetas a los ejes X y Y.

Este enfoque combinado permite visualizar tanto la distribución de los datos (histograma) como la densidad estimada (línea de densidad) en un solo gráfico.

:::

```{r}
df_camembert |>
  ggplot(aes(x=est)) +
    geom_histogram(aes(y = ..density..), bins = 20, fill = "lightblue", color = "black") +
    geom_density(color = "red", size = 1) +
    labs(title = "Histograma y densidad", x = "Valores", y = "Densidad")
```

La ventaja de los gráficos de densidad es que como no tenemos que fraccionar los datos en intervalos arbitrarios, no estamos afectados por el efecto visual de la anchura de estos intervalos. También hay otras ventajas desde el punto de vista estadístico, que veremos al hablar de las distribuciones de probabilidad.

La flexibilidad de configuración de los gráficos de `qqplot()`permite la personalización de los gráficos hasta el último detalle. A continuación vemos un gráfico de densidad agrupado por meses, que nos muestra aparentes diferencias en el extracto seco `est` según los meses.

::: { .callout-tip collapse="true" .content-visible when-format="html" icon="false" }
## Explicación del código R

**1. Leer el archivo CSV**

```r
df_camembert <- read.csv2("excel-R/camembert.csv", fileEncoding = 'latin1')
```
- **`df_camembert <- read.csv2("excel-R/camembert.csv", fileEncoding = 'latin1')`**: Esta línea lee el archivo CSV llamado `camembert.csv` desde la carpeta `excel-R` y lo almacena en el dataframe `df_camembert`. La opción `fileEncoding = 'latin1'` asegura que los caracteres especiales sean manejados correctamente durante la lectura del archivo.

**2. Iniciar el pipeline con el dataframe `df_camembert` y realizar transformaciones**

```r
df_camembert |> 
  mutate(fecha = as.Date(fecha, format = "%d/%m/%Y"), # Convertir a tipo Date 
  mes = format(fecha, "%m")) |> # Extraer el mes
```

- **`df_camembert |>`**: Utiliza el operador pipe (`|>`) para encadenar operaciones sobre el dataframe `df_camembert`.
- **`mutate(fecha = as.Date(fecha, format = "%d/%m/%Y"), mes = format(fecha, "%m"))`**:
  - **`fecha = as.Date(fecha, format = "%d/%m/%Y")`**: Convierte la columna `fecha` a tipo Date usando el formato `día/mes/año`.
  - **`mes = format(fecha, "%m")`**: Extrae el mes de la columna `fecha` y lo almacena en una nueva columna `mes`.

**3. Crear el gráfico de densidad**

```r
ggplot(aes(x = est, color = mes, fill = mes)) + # Crear el gráfico de densidad
  geom_density(alpha = 0.5) + # Añadir capa de densidad con transparencia
  labs(title = "Curvas de Densidad de 'est' por Mes", 
       x = "Valor de 'est'", 
       y = "Densidad", 
       color = "Mes", 
       fill = "Mes") + 
  theme_minimal()
```

- **`ggplot(aes(x = est, color = mes, fill = mes))`**: Inicia un objeto `ggplot` y define las estéticas (aes):
  - **`x = est`**: Mapea la variable `est` al eje X.
  - **`color = mes, fill = mes`**: Usa la variable `mes` para colorear y rellenar las curvas de densidad, permitiendo diferenciar los meses.

- **`geom_density(alpha = 0.5)`**: Añade una capa de densidad al gráfico:
  - **`alpha = 0.5`**: Establece la transparencia de las curvas de densidad al 50%, lo que permite ver superposiciones.

- **`labs(title = "Curvas de Densidad de 'est' por Mes", x = "Valor de 'est'", y = "Densidad", color = "Mes", fill = "Mes")`**: Añade etiquetas y título al gráfico:
  - **`title = "Curvas de Densidad de 'est' por Mes"`**: Título del gráfico.
  - **`x = "Valor de 'est'"`**: Etiqueta del eje X.
  - **`y = "Densidad"`**: Etiqueta del eje Y.
  - **`color = "Mes", fill = "Mes"`**: Etiquetas para la leyenda de colores y rellenos.

- **`theme_minimal()`**: Aplica un tema minimalista al gráfico para un diseño limpio y simple.

**Resumen**

Este código realiza las siguientes acciones:
1. Lee un archivo CSV y lo almacena en un dataframe.
2. Convierte la columna `fecha` a tipo Date y extrae el mes de la fecha.
3. Crea un gráfico de densidad de la variable `est` diferenciada por mes con transparencia para facilitar la visualización de superposiciones y aplica un diseño minimalista al gráfico.

:::



```{r}
df_camembert <- read.csv2("excel-R/camembert.csv", fileEncoding = 'latin1') 
df_camembert |> 
  mutate(fecha = as.Date(fecha, format = "%d/%m/%Y"), # Convertir a tipo Date 
  mes = format(fecha, "%m")) |> # Extraer el mes 
  ggplot(aes(x = est, color = mes, fill = mes)) + # Crear el gráfico de densidad 
    geom_density(alpha = 0.5) + # Añadir capa de densidad con transparencia 
    labs(title = "Curvas de Densidad de 'est' por Mes", x = "Valor de 'est'", y = "Densidad", color = "Mes", fill = "Mes")+    
    theme_minimal()

```

## Diagramas de caja (*boxplot*) y resumen de cinco números.

Este gráfico fue creado por el estadístico John Tukey en 1977, y es una herramienta fundamental en la exploración de datos. Se basa en un grupo de medidas que se utiliza ampliamente en la descripción de conjuntos de datos, el conjunto de **cuartiles**. Si dividimos un grupo de datos **ordenados** en cuatro partes iguales, mediante **tres** puntos de corte, llamamos **primer cuartil** o $Q1$ al valor que se situa en el 25%; **segundo cuartil**, o $Q2$, al valor que se sitúa en el centro (50%), y **tercer cuartil**, o $Q3$, al punto que se situa en el 75% de los datos. A estos tres valores añadimos el **mínimo** y el **máximo**, y tenemos un conjunto de **cinco números** que nos permiten describir la forma de la distribución de datos con cierta precisión. El segundo cuartil ($Q2$), que corresponde al 50% de los datos, se conoce habitualmente como **mediana**. El valor resultante de restar $Q3-Q1$ es lo que se conoce como **rango intercuartil** o $IQR$, y es una medida de la dispersión de la distribución de datos (mide la amplitud de la distribución).

El **diagrama de caja**, también conocido como *boxplot*, es un gráfico que permite resumir las características principales de un conjunto de datos utilizando estos cinco números, tal como se explica a continuación. Sus ventajas son:

-   Muestra la mediana y los cuartiles (Q1 y Q3) de los datos.
-   Permite identificar la simetría de la distribución: si la mediana no está en el centro, la distribución no es simétrica.
-   Permite detectar posibles valores atípicos, representando los valores atípicos (*outliers*) que están lejos del resto de los datos (un valor es atípico si está más allá de (Q3 + 1.5 \cdot IQR) o (Q1 - 1.5 \cdot IQR).

La construcción de un diagrama de caja es como sigue:

![](01-imagenes/boxplot.svg)

Microsoft Excel no dispone de un diseño de gráficos de caja que sea práctico, por lo que recurriremos siempre a R para realizarlos.

Como casi siempre, hay una función de base que dibuja un *boxplot* y también una geometría de `ggplot()`que lo hace: `geom_boxplot()`, con muchas más opciones de diseño y formato que la opción de base.

```{r}
#| label: fig-boxplot
#| fig-cap: "Boxplot con los gráficos básicos de R"

boxplot(df_aula$altura_cm)
```

Vamos a repetir el gráfico para los datos de producción de queso camembert, usando ahora los gráficos básicos y los de `ggplot()`:

::: { .callout-tip collapse="true" .content-visible when-format="html" icon="false" }
## Explicación del código R

1. **Leer el archivo CSV**:
   ```r
   df_camembert <- read.csv2("excel-R/camembert.csv", fileEncoding = 'latin1')
   ```
   - **`df_camembert <- read.csv2("excel-R/camembert.csv", fileEncoding = 'latin1')`**: Lee el archivo CSV denominado `camembert.csv` y lo almacena en el dataframe `df_camembert`. La opción `fileEncoding = 'latin1'` asegura que los caracteres especiales se manejen correctamente durante la lectura del archivo.

2. **Convertir la columna `fecha` a tipo `Date`**:
   ```r
   df_camembert$fecha <- as.Date(df_camembert$fecha, format("%d/%m/%Y"))
   ```
   - **`df_camembert$fecha <- as.Date(df_camembert$fecha, format("%d/%m/%Y"))`**: Convierte la columna `fecha` en el dataframe `df_camembert` al tipo de dato `Date` usando el formato de fecha `"%d/%m/%Y"`, que corresponde a día/mes/año.

3. **Crear un boxplot básico de la variable `est`**:
   ```r
   boxplot(df_camembert$est)
   ```
   - **`boxplot(df_camembert$est)`**: Crea un diagrama de caja y bigotes (boxplot) básico para la variable `est` del dataframe `df_camembert`. Este gráfico muestra la distribución de los datos, destacando la mediana, cuartiles y posibles valores atípicos.

4. **Crear un boxplot personalizado utilizando `ggplot2`**:
   ```r
   df_camembert |>
     ggplot(aes(x = "", y = est)) +
     geom_boxplot() +
     theme_bw() +
     theme(axis.text.x = element_blank(),  # Oculta las etiquetas del eje x
           axis.ticks.x = element_blank()) # Oculta las marcas del eje x
   ```
   - **`df_camembert |>`**: Utiliza el operador pipe (`|>`) para encadenar operaciones sobre el dataframe `df_camembert`.

5. **Iniciar `ggplot` con las estéticas (aes)**:
   ```r
   ggplot(aes(x = "", y = est)) +
   ```
   - **`ggplot(aes(x = "", y = est))`**: Inicia un objeto `ggplot` y define las estéticas (aes). La variable `est` se mapea al eje Y. No se especifica una variable en el eje X, por lo que se deja como una cadena vacía `""`.

6. **Agregar la capa del boxplot**:
   ```r
   geom_boxplot() +
   ```
   - **`geom_boxplot()`**: Añade una capa de boxplot al gráfico, que muestra la distribución de la variable `est`.

7. **Aplicar un tema en blanco y negro**:
   ```r
   theme_bw() +
   ```
   - **`theme_bw()`**: Aplica un tema en blanco y negro al gráfico, proporcionando un diseño limpio y clásico.

8. **Personalizar el tema**:
   ```r
   theme(axis.text.x = element_blank(),  # Oculta las etiquetas del eje x
         axis.ticks.x = element_blank()) # Oculta las marcas del eje x
   ```
   - **`theme(axis.text.x = element_blank(), axis.ticks.x = element_blank())`**: Personaliza el tema para ocultar las etiquetas del eje X y las marcas del eje X, dejando un gráfico más claro y limpio.


El código realiza las siguientes acciones:

- Lee un archivo CSV y lo convierte en un dataframe.
- Convierte la columna `fecha` a tipo `Date`.
- Crea un boxplot básico de la variable `est`.
- Utiliza `ggplot2` para crear un boxplot más personalizable de la variable `est`, aplicando un tema en blanco y negro y ocultando las etiquetas y marcas del eje X.

:::

```{r}
#| label: fig-boxplot2
#| fig-cap: "Ejemplos de boxplot"
#| fig-subcap: 
#|   - "Boxplot básico de R"
#|   - "Boxplot utilizando `ggplot()`"
#| layout-ncol: 2

df_camembert <- read.csv2("excel-R/camembert.csv",fileEncoding='latin1')
df_camembert$fecha <- as.Date(df_camembert$fecha, format("%d/%m/%Y"))

boxplot(df_camembert$est)

df_camembert |>
  ggplot(aes(x="", y=est))+
  geom_boxplot() +
  theme_bw() +
  theme(axis.text.x = element_blank(),  # Oculta las etiquetas del eje x
        axis.ticks.x = element_blank()) # Oculta las marcas del eje x
```

Un uso muy interesante del boxplot en R consiste en agrupar los boxplot de una variable en funcion de otra. En este caso, agrupamos el extracto seco por meses previa agrupación de la fecha. Esta agrupación puede hacerse tanto en los gráficos básicos de R como en `ggplot()`:

::: { .callout-tip collapse="true" .content-visible when-format="html" icon="false" }
## Explicación del código R

1. **Crear una nueva columna `mes` a partir de `fecha`**:
   ```r
   df_camembert$mes <- format(df_camembert$fecha, "%m")
   ```
   - **`df_camembert$mes <- format(df_camembert$fecha, "%m")`**: Crea una nueva columna `mes` en el dataframe `df_camembert`. La función `format` se utiliza para convertir las fechas en la columna `fecha` al formato de mes (`%m`), extrayendo solo el mes de cada fecha.

2. **Crear un boxplot básico de `est` por mes**:
   ```r
   boxplot(df_camembert$est ~ df_camembert$mes)
   ```
   - **`boxplot(df_camembert$est ~ df_camembert$mes)`**: Crea un diagrama de caja y bigotes (boxplot) básico que muestra la distribución de la variable `est` para cada mes, donde `df_camembert$est` se grafica en el eje Y y `df_camembert$mes` en el eje X.

3. **Utilizar `ggplot2` para crear un boxplot más personalizado**:
   ```r
   df_camembert |>
     mutate(mes = format(fecha, "%m")) |>
     ggplot(aes(x = mes, y = est)) +
     geom_boxplot() +
     labs(title = "Boxplot de 'est' por Meses",
          x = "Mes",
          y = "Valor de est") +
     theme_minimal()
   ```
   - **`df_camembert |>`**: Utiliza el operador pipe (`|>`) para encadenar operaciones sobre el dataframe `df_camembert`.

4. **Crear y mutar la columna `mes` dentro del pipeline**:
   ```r
   mutate(mes = format(fecha, "%m")) |>
   ```
   - **`mutate(mes = format(fecha, "%m"))`**: Añade una nueva columna `mes` al dataframe utilizando la función `format` para extraer el mes de la columna `fecha`.

5. **Iniciar `ggplot` con las estéticas (aes)**:
   ```r
   ggplot(aes(x = mes, y = est)) +
   ```
   - **`ggplot(aes(x = mes, y = est))`**: Inicia un objeto `ggplot` y define las estéticas (aes). La variable `mes` se mapea al eje X y la variable `est` al eje Y.

6. **Agregar la capa del boxplot**:
   ```r
   geom_boxplot() +
   ```
   - **`geom_boxplot()`**: Añade una capa de boxplot al gráfico, mostrando la distribución de la variable `est` para cada mes.

7. **Agregar etiquetas y título**:
   ```r
   labs(title = "Boxplot de 'est' por Meses",
        x = "Mes",
        y = "Valor de est") +
   ```
   - **`labs(title = "Boxplot de 'est' por Meses", x = "Mes", y = "Valor de est")`**: Añade etiquetas y título al gráfico.
     - **`title = "Boxplot de 'est' por Meses"`**: Establece el título del gráfico.
     - **`x = "Mes"`**: Etiqueta el eje X.
     - **`y = "Valor de est"`**: Etiqueta el eje Y.

8. **Aplicar un tema minimalista**:
   ```r
   theme_minimal()
   ```
   - **`theme_minimal()`**: Aplica un tema minimalista al gráfico, proporcionando un diseño limpio y simple, sin distracciones innecesarias.

**Resumen**

El código realiza las siguientes acciones:

- Añade una columna `mes` al dataframe `df_camembert`, que contiene solo el mes extraído de la columna `fecha`.
- Crea un boxplot básico que muestra la distribución de `est` por mes.
- Utiliza `ggplot2` para crear un boxplot más personalizado de `est` por mes, con etiquetas y un tema minimalista para un diseño limpio.

:::

```{r}
#| label: fig-boxplot3
#| fig-cap: "Ejemplos de boxplot"
#| fig-subcap: 
#|   - "Boxplot básico de R"
#|   - "Boxplot utilizando `ggplot()`"
#| layout-ncol: 2

df_camembert$mes <- format(df_camembert$fecha, "%m")
boxplot (df_camembert$est~df_camembert$mes)

df_camembert |>
  mutate (mes = format(fecha, "%m")) |>
  ggplot(aes(x = mes, y = est)) +
    geom_boxplot() +
    labs(title = "Boxplot de 'est' por Meses",
       x = "Mes",
       y = "Valor de est") +
    theme_minimal()
```

La agrupación de los _boxplots_ por meses nos pone claramente de manifiesto las diferencias en el extracto seco `est`que ya habíamos visto con los gráficos de densidad. Estas diferencias son más claras en el mes de julio.

## Histogramas y diagramas de caja

Resulta muy útil comprender visualmente la relación entre el *boxplot* y el histograma para entender la distribución de los datos. En la gráfica siguiente se representan ambos simultáneamente

::: { .callout-tip collapse="true" .content-visible when-format="html" icon="false" }
## Explicación del código R

1. **Iniciar el pipeline con `df_camembert`**:
   ```r
   df_camembert |>
   ```
   - Utiliza el operador pipe (`|>`) para encadenar operaciones sobre el dataframe `df_camembert`.

2. **Iniciar `ggplot` con las estéticas (aes)**:
   ```r
   ggplot(aes(x = est)) +
   ```
   - **`ggplot(aes(x = est))`**: Inicia un objeto `ggplot` y define las estéticas (aes). La variable `est` se mapea al eje X.

3. **Agregar la capa del histograma**:
   ```r
   geom_histogram(fill = "lightblue", color = "black", bins = 20, alpha = 0.7) +
   ```
   - **`geom_histogram(fill = "lightblue", color = "black", bins = 20, alpha = 0.7)`**: Añade una capa de histograma al gráfico.
     - **`fill = "lightblue"`**: Colorea las barras del histograma de azul claro.
     - **`color = "black"`**: Colorea los bordes de las barras en negro.
     - **`bins = 20`**: Especifica el número de barras (bins) en el histograma.
     - **`alpha = 0.7`**: Establece la transparencia de las barras (valor entre 0 y 1, donde 0 es completamente transparente y 1 es opaco).

4. **Agregar la capa del boxplot**:
   ```r
   geom_boxplot(width = 2, fill = "darkgrey", alpha = 0.7, position = position_nudge(y = -2)) +
   ```
   - **`geom_boxplot(width = 2, fill = "darkgrey", alpha = 0.7, position = position_nudge(y = -2))`**: Añade una capa de boxplot al gráfico.
     - **`width = 2`**: Especifica el ancho del boxplot.
     - **`fill = "darkgrey"`**: Colorea el boxplot de gris oscuro.
     - **`alpha = 0.7`**: Establece la transparencia del boxplot (valor entre 0 y 1).
     - **`position = position_nudge(y = -2)`**: Ajusta la posición del boxplot, desplazándolo hacia abajo en el eje Y para que no se superponga con el histograma.

5. **Agregar etiquetas y título**:
   ```r
   labs(title = "Histograma y Boxplot", y = "Frecuencias") +
   ```
   - **`labs(title = "Histograma y Boxplot", y = "Frecuencias")`**: Añade etiquetas y título al gráfico.
     - **`title = "Histograma y Boxplot"`**: Establece el título del gráfico.
     - **`y = "Frecuencias"`**: Etiqueta el eje Y como "Frecuencias".

**Resumen Completo**

El código realiza las siguientes acciones:

- Inicia el pipeline con el dataframe `df_camembert`.
- Define la estética (aes) para mapear la variable `est` al eje X.
- Añade un histograma con barras azules claras, bordes negros, 20 bins y una transparencia del 70%.
- Añade un boxplot con ancho de 2, relleno gris oscuro, transparencia del 70% y lo desplaza hacia abajo en el eje Y para evitar superposición con el histograma.
- Añade un título y etiqueta el eje Y como "Frecuencias".

:::

```{r}
df_camembert |>
ggplot(aes(x = est)) +
  geom_histogram(fill = "lightblue", color = "black", bins = 20, alpha = 0.7) +
  geom_boxplot(width = 2, fill = "darkgrey", alpha = 0.7, position = position_nudge(y = -2)) +
  labs(title = "Histograma y Boxplot", y = "Frecuencias")

```

```{r}
df_camembert |>
ggplot(aes(x = log10(coliformes+1))) +
  geom_histogram(fill = "lightblue", color = "black", bins = 20, alpha = 0.7) +
  geom_boxplot(width = 4, fill = "darkgrey", alpha = 0.7, position = position_nudge(y = -4)) +
  labs(title = "Histograma y Boxplot", y = "Frecuencias")

```

## Gráficos de dispersión

Un gráfico de dispersión, también conocido como diagrama de dispersión o _scatter plot_, es una representación gráfica que utiliza puntos para mostrar la relación entre dos variables numéricas. Cada punto en el gráfico representa una observación del conjunto de datos y se coloca en el plano cartesiano de acuerdo con sus valores en las dos variables que se están comparando.

Un gráfico de dispersión se compone mediante puntos:

- Cada punto en el gráfico representa una observación.
- La posición del punto en el gráfico está determinada por los valores de las dos variables para esa observación.

Los gráficos de dispersión son útiles para identificar varios aspectos de la relación entre las dos variables:

- Si los puntos tienden a agruparse a lo largo de una línea recta ascendente, esto indica una correlación positiva (a medida que una variable aumenta, la otra también lo hace).
- Si los puntos se agrupan a lo largo de una línea descendente, esto indica una correlación negativa (a medida que una variable aumenta, la otra disminuye).
- Si los puntos forman una curva en lugar de una línea recta, esto sugiere una relación no lineal entre las variables.
- La dispersión de los puntos puede indicar la variabilidad de los datos. Puntos que están muy lejos del patrón general pueden ser valores atípicos.

Como siempre, vemos el gráfico de dispersión en Excel y a continuación en R. Utilizamos la tabla de datos `camembert.csv` y representamos las variables `est`y `mg`. 

::: {#fig-grafdisp layout-ncol=2}

![Tabla de origen mostrando una parte de los datos seleccionados](01-imagenes/camembert-tabla-dispersion-est-mg.png){#fig-tabladisp}

![Gráfico de dispersión](01-imagenes/camembert-dispersion-est-mg.png){#fig-grafdisp}

Gráfico de dispersión en Excel
:::

A continuación, el código R para realizar el gráfico de dispersión, con la función básica y con `ggplot()`.

::: { .callout-tip collapse="true" .content-visible when-format="html" icon="false" }
## Explicación del código R

**Primer Fragmento de Código:** `plot`

1. **Crear un gráfico de dispersión básico**:
   ```r
   plot(df_camembert$est, df_camembert$mg)
   ```
   - **`plot(df_camembert$est, df_camembert$mg)`**: Crea un gráfico de dispersión usando la función base `plot`.
     - **`df_camembert$est`**: Mapea la variable `est` al eje X.
     - **`df_camembert$mg`**: Mapea la variable `mg` al eje Y.

Este código genera un gráfico de dispersión que muestra la relación entre `est` y `mg`.

**Segundo Fragmento de Código:** `ggplot2`

2. **Utilizar `ggplot2` para crear un gráfico de dispersión más personalizable**:
   ```r
   df_camembert |>
     ggplot(aes(x = est, y = mg)) +
     geom_point() +
     theme_bw()
   ```
   - **`df_camembert |>`**: Utiliza el operador pipe (`|>`) para encadenar operaciones sobre el dataframe `df_camembert`.

3. **Iniciar `ggplot` con las estéticas (aes)**:
   ```r
   ggplot(aes(x = est, y = mg)) +
   ```
   - **`ggplot(aes(x = est, y = mg))`**: Inicia un objeto `ggplot` y define las estéticas (aes). La variable `est` se mapea al eje X y la variable `mg` al eje Y.

4. **Agregar la capa de puntos**:
   ```r
   geom_point() +
   ```
   - **`geom_point()`**: Añade una capa de puntos al gráfico, mostrando cada observación en `est` y `mg`.

5. **Aplicar un tema en blanco y negro**:
   ```r
   theme_bw()
   ```
   - **`theme_bw()`**: Aplica un tema en blanco y negro al gráfico, proporcionando un diseño limpio y clásico.

**Resumen Completo**

- **Primer Fragmento**:

  ```r
  plot(df_camembert$est, df_camembert$mg)
  ```
  Este código crea un gráfico de dispersión básico utilizando la función `plot` de base R, mapeando `est` al eje X y `mg` al eje Y.

- **Segundo Fragmento**:

  ```r
  df_camembert |>
    ggplot(aes(x = est, y = mg)) +
    geom_point() +
    theme_bw()
  ```
  Este conjunto de instrucciones utiliza `ggplot2` para crear un gráfico de dispersión más personalizable, mapeando `est` al eje X y `mg` al eje Y, añadiendo una capa de puntos y aplicando un tema en blanco y negro para un diseño limpio y claro.

:::
```{r}
#| label: fig-grafdisp
#| fig-cap: "Ejemplos de gráfico de dispersión"
#| fig-subcap: 
#|   - "Gráfico de dispersion básico de R"
#|   - "Gráfico de dispersion utilizando `ggplot()`"
#| layout-ncol: 2
#| 
plot(df_camembert$est, df_camembert$mg)

df_camembert |>
  ggplot(aes(x=est,y=mg))+
  geom_point() +
  theme_bw()

```

Lo esperable en nuestros datos es que el valor de `est` y el de `mg` estén asociados, y a valores altos de la primera variable correspondan valores altos de la segunda (para el mismo producto y sin cambios de tecnología). Sin embargo, algunos valores parecen no encajar en este modelo; es el caso de un valor de `est`por encima de 52% con un valor de `mg`inferior a 23%, o el caso de un valor de `mg` en torno al 28% con un valor de `est` por debajo de 47%. Debemos revisar estos valores aparentemente anormales para verificar si ha habido un error en la toma de muestras o un error analítico. En fábricas con productos diferentes cuyos resultados analíticos se recogen en una tabla de datos común, a veces puede haber errores en la introducción de los códigos de producto, de forma que la toma de muestras y los análisis pueden ser correctos, pero estar mal asignados al guardar los datos.

Como vemos, los gráficos de dispersión son una herramienta esencial en el análisis de datos exploratorio, ya que permiten visualizar relaciones y patrones en los datos, identificar correlaciones y detectar posibles anomalías. Esta información es crucial para realizar análisis estadísticos más profundos y tomar decisiones basadas en datos.


## Gráficos de series temporales

Hasta ahora hemos utilizado gráficos y tablas que describen la estructura y forma de una variable, o las relaciones entre dos variables. Hay otros gráficos que tienen en cuenta la forma en la que esos datos cambian con el tiempo. En este caso, será necesario que hayamos recogido en una variable de nuestra tabla los intervalos de tiempo en los que se han producido nuestros valores.

::: {.callout-note .content-visible when-format="html" icon="false"}
## Ejemplos de series temporales

¿Se te ocurren algunos ejemplos de series temporales?

:::

::: { .callout-tip collapse="true" .content-visible when-format="html" icon="false" }
## Algunos ejemplos

- proceso de llenado de envases de queso crema: se llena una tarrina cada 15 segundos. Nuestros datos deben recoger el tiempo y el peso.

- nuestro fichero de fabricación de queso camembert recoge los valores analíticos medios diarios del producto fabricado.

- Una fábrica recoge leche diariamente y analiza cada día la composición de la leche que entra en la fábrica.

:::


En un gráfico de series temporales, 

- el eje horizontal (X) representa el tiempo. Los puntos de tiempo pueden ser minutos, horas, días, meses, años, etc.
- el eje vertical (Y) representa los valores de la variable que se está estudiando. Estos valores pueden ser medidas como temperatura, ventas, precios, etc.
- cada valor individual corresponde a un punto
- los valores se conectan mediante una línea que conecta los puntos de datos, mostrando cómo cambian los valores de la variable a lo largo del tiempo.
- normalmente, en un gráfico de series temporales no suelen representarse los puntos individuales para facilitar la legibilidad del gráfico.

En nuestro conjunto de datos de fabricación de queso camembert, la primera columna de la tabla recoge la variable `fecha`, lo que nos permite ordenar nuestros valores en el tiempo.

Cuando representamos valores en el tiempo, nunca usaremos el diagrama de barras, sino el gráfico de líneas.

### Cómo hacer los gráficos de series temporales en Excel y en R

Para hacer el gráfico en Excel, seleccionamos la columna `est`e insertamos un gráfico de líneas. A continuación, con el cursor sobre el gráfico, pulsamos el boton derecho y seleccionamos la opción `Seleccionar datos`. Una vez abierto el cuadro de opciones, editamos las etiquetas del eje X y seleccionamos el rango de la variable `fecha` desde la fila 2 hasta la última.Aceptamos, y a continuación editamos el formato del eje Y para sustituir el valor mínimo de $0$ por $42$, que es el valor que queremos como mínimo para nuestro gráfico.

![Tabla y gráfico de series](01-imagenes/camembert-excel-graf-series.png){#fig-tabladisp}

A continuación, los gráficos en R, como siempre con la opción de gráficos base y con `ggplot()`. R formatea automáticamente el rango del eje Y y no tenemos que hacer ninguna corrección de formato.

::: { .callout-tip collapse="true" .content-visible when-format="html" icon="false" }
## Explicación del código R

**Primer Fragmento de Código:** `plot`

1. **Crear un gráfico de líneas básico**:
   ```r
   plot(df_camembert$fecha, df_camembert$est, type = "l")
   ```
   - **`plot(df_camembert$fecha, df_camembert$est, type = "l")`**: Crea un gráfico de líneas usando la función base `plot`.
     - **`df_camembert$fecha`**: Mapea la variable `fecha` al eje X.
     - **`df_camembert$est`**: Mapea la variable `est` al eje Y.
     - **`type = "l"`**: Especifica que el gráfico debe ser de líneas. La `"l"` indica que las observaciones deben conectarse con líneas.

**Segundo Fragmento de Código:** `ggplot2`

2. **Utilizar `ggplot2` para crear un gráfico de líneas**:
   ```r
   df_camembert |>
     ggplot(aes(x = fecha, y = est)) +
     geom_line() +
     theme_bw()
   ```
   - **`df_camembert |>`**: Utiliza el operador pipe (`|>`) para encadenar operaciones sobre el dataframe `df_camembert`.

3. **Iniciar `ggplot` con las estéticas (aes)**:
   ```r
   ggplot(aes(x = fecha, y = est)) +
   ```
   - **`ggplot(aes(x = fecha, y = est))`**: Inicia un objeto `ggplot` y define las estéticas (aes). La variable `fecha` se mapea al eje X y la variable `est` al eje Y.

4. **Agregar la capa de línea**:
   ```r
   geom_line() +
   ```
   - **`geom_line()`**: Añade una capa de líneas al gráfico, conectando los puntos de datos en `fecha` y `est`.

5. **Aplicar un tema en blanco y negro**:
   ```r
   theme_bw()
   ```
   - **`theme_bw()`**: Aplica un tema en blanco y negro al gráfico, proporcionando un diseño limpio y clásico.

**Resumen Completo**

- **Primer Fragmento**:

   ```r
   plot(df_camembert$fecha, df_camembert$est, type = "l")
   ```
   Este código crea un gráfico de líneas básico utilizando la función `plot` de base R, mapeando `fecha` al eje X y `est` al eje Y.

- **Segundo Fragmento**:

   ```r
   df_camembert |>
     ggplot(aes(x = fecha, y = est)) +
     geom_line() +
     theme_bw()
   ```
   Este conjunto de instrucciones utiliza `ggplot2` para crear un gráfico de líneas más personalizable, mapeando `fecha` al eje X y `est` al eje Y, añadiendo una capa de líneas y aplicando un tema en blanco y negro para un diseño limpio y claro.

:::

```{r}
#| label: fig-graftemp
#| fig-cap: "Ejemplos de gráfico de series temporales"
#| fig-subcap: 
#|   - "Gráfico de series temporales básico de R"
#|   - "Gráfico de series temporales utilizando `ggplot()`"
#| layout-ncol: 2

plot(df_camembert$fecha, df_camembert$est, type="l")

df_camembert |>
  ggplot(aes(x=fecha, y=est))+
  geom_line() +
  theme_bw()

```

### Resumen

Los gráficos de series temporales son útiles para:

1. **Identificar Tendencias**:
   - Una tendencia es una dirección general en la que los datos se mueven a lo largo del tiempo. Puede ser creciente, decreciente o constante.

2. **Detección de Estacionalidad**:
   - La estacionalidad se refiere a patrones que se repiten en intervalos regulares de tiempo, como las ventas de productos estacionales.

3. **Identificar Ciclos**:
   - Los ciclos son fluctuaciones que ocurren en intervalos no regulares y pueden deberse a factores económicos o de otra índole.

4. **Detección de Anomalías**:
   - Los picos y caídas repentinas pueden indicar eventos inusuales o errores en los datos.


Los gráficos de series temporales son cruciales en diversas áreas:

1. **Economía y Finanzas**:
   - Seguimiento de precios de acciones, tasas de interés y otros indicadores económicos.

2. **Ciencia y Tecnología**:
   - Monitoreo de variables ambientales, datos meteorológicos y medidas científicas.

3. **Negocios**:
   - Análisis de ventas, demanda de productos y desempeño empresarial a lo largo del tiempo.

Los gráficos de series temporales proporcionan una visión clara y concisa de cómo cambian los datos a lo largo del tiempo. Esta visualización es fundamental para el análisis predictivo, la toma de decisiones y la identificación de patrones y anomalías en los datos. 
